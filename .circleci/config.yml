version: 2.1

orbs:
  python: circleci/python@0.3.0

aliases:
  - &db_env
      POSTGRES_USER: tap
      POSTGRES_DB: tap
      POSTGRES_PASSWORD: tap

jobs:
  test-frontend:
    docker:
      - image: circleci/python:3.8.3
        environment:
          DJANGO_SETTINGS_MODULE: config.settings.ci
          SECRET_KEY: ci-secret-key
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          <<: *db_env
      - image: circleci/postgres:11
        environment:
          <<: *db_env

    steps:
      - checkout
      - python/load-cache:
          dependency-file: frontend/requirements/dev.txt
      - python/install-deps:
          dependency-file: frontend/requirements/dev.txt
      - python/save-cache:
          dependency-file: frontend/requirements/dev.txt
      - run:
          name: Run linter
          command: cd frontend && flake8 .
      - run:
          name: Run Tests
          command: |
            cd frontend
            pytest -p no:sugar -v
      - store_artifacts:
          path: frontend/reports
      - store_test_results:
          path: frontend/reports/coverage/junitxml

  test-backoffice:
    docker:
      - image: circleci/python:3.8.3
        environment:
          DJANGO_SETTINGS_MODULE: config.settings.ci
          SECRET_KEY: ci-secret-key
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          NOTIFY_API_KEY: NOTIFICATION-SERVICE-KEY
          <<: *db_env
      - image: circleci/postgres:11
        environment:
          <<: *db_env

    steps:
      - checkout
      - python/load-cache:
          dependency-file: backoffice/requirements/dev.txt
      - python/install-deps:
          dependency-file: backoffice/requirements/dev.txt
      - python/save-cache:
          dependency-file: backoffice/requirements/dev.txt
      - run:
          name: Run linter
          command: cd backoffice && flake8 .
      - run:
          name: Run Tests
          command: |
            cd backoffice
            pytest -p no:sugar -v
      - store_artifacts:
          path: backoffice/reports
      - store_test_results:
          path: backoffice/reports/coverage/junitxml

  generate-erd:
    machine:
      docker_layer_caching: true

    steps:
      - checkout
      - run:
          name: Setup env
          command: |
            echo "DJANGO_SETTINGS_MODULE=config.settings.ci
            SECRET_KEY=ci-secret-key
            POSTGRES_HOST=backoffice_db
            POSTGRES_PORT=5432
            NOTIFY_API_KEY=NOTIFICATION-SERVICE-KEY
            POSTGRES_USER=tap
            POSTGRES_DB=tap
            POSTGRES_PASSWORD=tap" > backoffice/.env
            echo "DJANGO_SETTINGS_MODULE=config.settings.ci
            SECRET_KEY=ci-secret-key
            POSTGRES_HOST=frontend_db
            POSTGRES_PORT=5432
            POSTGRES_USER=tap
            POSTGRES_DB=tap
            POSTGRES_PASSWORD=tap" > frontend/.env
      - run:
          name: Build docker images
          command: make build-backoffice
      - run:
          name: Migrate DB
          command: |
            echo "DJANGO_SETTINGS_MODULE=config.settings.ci
            SECRET_KEY=ci-secret-key
            POSTGRES_HOST=backoffice_db
            POSTGRES_PORT=5432
            NOTIFY_API_KEY=NOTIFICATION-SERVICE-KEY
            POSTGRES_USER=tap
            POSTGRES_DB=tap
            POSTGRES_PASSWORD=tap" > backoffice/.env
            make -C backoffice django-migrate
      - run:
          name: Generate ERDs
          command: |
            mkdir -p backoffice/reports/diagrams
            make -C backoffice graph-models
      - store_artifacts:
          path: backoffice/reports

workflows:
  build:
    jobs:
      - generate-erd
      - test-backoffice
      - test-frontend
